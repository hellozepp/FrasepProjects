install.packages("dplyr")
install.packages("data.table")
install.packages("tidyr")
install.packages("tidytext")
install.packages("shiny")
install.packages("leaflet")
install.packages("hunspell")
install.packages("rpart")
install.packages("lda")
install.packages("LDAvis")
install.packages("ggplot2")
install.packages("sentimentr")
library(twitteR)
library(sentiment)
install.packages("sentiment")
library(sentimentr)
library(plyr)
library(ggplot2)
library(wordcloud)
library(RColorBrewer)
install.packages(c("backports", "hunspell", "jsonlite", "knitr", "purrr", "R6", "Rcpp", "readr", "tibble", "tidyr"))
install.packages(c("DBI", "dplyr", "evaluate", "gutenbergr", "janeaustenr", "R6", "rmarkdown", "tidytext"))
install.packages(c("curl", "hunspell", "sp"))
getpw()
get_all_vars()
clear
()
quit
quit
install.packages(c("curl", "dplyr", "haven", "htmlwidgets", "httpuv", "igraph", "purrr", "Rcpp", "textshape"))
install.packages(c("BH", "httr", "knitr", "NLP", "rlang", "scales", "shiny", "tibble", "tidyr"))
install.packages(c("assertthat", "backports", "BH", "bindr", "bindrcpp", "broom", "colorspace", "crosstalk", "curl", "data.table", "DBI", "digest", "doParallel", "dplyr", "english", "evaluate", "forcats", "foreach", "formatR", "ggplot2", "glue", "gridExtra", "gtable", "gutenbergr", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "igraph", "irlba", "iterators", "jsonlite", "knitr", "lazyeval", "leaflet", "lexicon", "markdown", "mime", "mnormt", "munsell", "NLP", "NMF", "openNLP", "openNLPdata", "openssl", "pkgconfig", "pkgmaker", "plogr", "plyr", "proxy", "psych", "purrr", "R6", "raster", "Rcpp", "readr", "readxl", "registry", "reshape2", "rJava", "RJSONIO", "rlang", "rmarkdown", "rngtools", "rpart", "rprojroot", "rvest", "scales", "selectr", "sentimentr", "shiny", "slam", "SnowballC", "sourcetools", "sp", "stringi", "stringr", "syuzhet", "textclean", "textshape", "tibble", "tidyr", "tidyselect", "tidytext", "tm", "tokenizers", "urltools", "viridis", "viridisLite", "wordcloud", "xml2", "xtable", "yaml", "zoo"))
install.packages('dplyr')
install.packages('httr')
install.packages('jsonlite')
install.packages('https://github.com/sassoftware/R-swat/releases/download/v1.4.1/R-swat-1.4.1-win64.tar.gz',repos=NULL, type='file')
# Load necessary packages
library('swat')
library('ggplot2')
library('reshape2')
options(cas.print.messages = TRUE)
install.packages("ggplot2")
install.packages("reshape2")
# Load necessary packages
library('swat')
library('ggplot2')
library('reshape2')
options(cas.print.messages = TRUE)
install.packages('https://github.com/sassoftware/R-swat/releases/download/v1.4.1/R-swat-1.4.1-win64.tar.gz',repos=NULL, type='file')
# Load necessary packages
library('swat')
library('ggplot2')
library('reshape2')
options(cas.print.messages = TRUE)
install.packages('https://github.com/sassoftware/R-swat/releases/download/v1.4.1/R-swat-1.4.1-win64.tar.gz',repos=NULL, type='file')
install.packages('https://github.com/sassoftware/R-swat/releases/download/v1.4.1/R-swat-1.4.1-win64.tar.gz',repos=NULL, type='file')
# Load necessary packages
library('swat')
library('ggplot2')
library('reshape2')
options(cas.print.messages = TRUE)
conn <- swat::CAS('viya35.local.fr', 5570, username='sasdemo', password='Lprzwb31CA')
out <- cas.sessionProp.setSessOpt(conn, metrics=TRUE)
conn.close()
cas.session.endSession(conn)
install.packages(c("data.table", "rlist"))
shiny::runApp('H:/github/FrasepProjects/FrasepProjects/viya_shiny_app/viya_shiny_app')
shiny::runApp('H:/github/FrasepProjects/FrasepProjects/viya_shiny_app/viya_shiny_app')
connect(username = 'sasdemo', password = 'Lprzwb31CA')
# Copyright Â© 2020, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
#setwd("C://my_local_data/github/frasepprojects/FrasepProjects/viya_shiny_app/viya_shiny_app")
#setwd("/home/viyademo01/github/FrasepProjects/viya_shiny_app/viya_shiny_app")
setwd("H://github/FrasepProjects/FrasepProjects/viya_shiny_app/viya_shiny_app")
library(dplyr)
library(swat)
library(ggplot2)
options(cas.print.messages = TRUE)
options(shiny.maxRequestSize=30*1024^2)
globalhostname <- "viya35.local.fr"
#####################################
# R code for data manipulation,
# model training and visualization
#####################################
conn <- 0
lst_caslibs <- list()
# List available caslibs
list_caslib <- function() {
libs <- cas.table.caslibInfo(conn)
lst_names <- libs$CASLibInfo[,"Name"]
return(lst_names)
}
# Open connection to CAS and import main functions
connect <- function(username, password, lib) {
conn <<- CAS(globalhostname, port=5570, caslib = 'casuser',   username = username,   password = password)
lst_caslibs <<- list_caslib()
print(lst_caslibs)
return(cas.builtins.serverStatus(conn))
}
# List tables from a specific CASLIB
list_tables <- function(lib) {
tbls <- cas.table.tableInfo(conn, caslib=lib)
names <- tbls$TableInfo[1:3]
return(names)
}
# Generate summary statistics for a specific CAS Table
explore_tbl <- function(tbl) {
cols <- c("Column", "Min", "Max", "N", "NMiss", "Mean",	"Sum")
summary_tbl <- data.frame(cas.simple.summary(conn, table={name=tbl}))[1:7]
colnames(summary_tbl) <- cols
return(summary_tbl)
}
# Get table from CAS to R dataframe
get_table <- function(tbl) {
tbl <- defCasTable(conn, tbl)
tbl <- to.casDataFrame(tbl)
return(tbl)
}
connect(username = 'sasdemo', password = 'Lprzwb31CA')
list_tables('casuser')
