<html>
    <head>
        <link rel="stylesheet" type="text/css" href="sas.css"/>
        <title>Create an Additional CAS Server</title>
    </head>
    <body>
        <h1 id="create-an-additional-cas-server">Create an Additional CAS Server</h1>
<h2 id="overview">Overview</h2>
<p>This readme describes how to create additional CAS server definitions with the
<code>create-cas-server.sh</code> script. The script creates a Custom Resource (CR) that
can be added to your manifest and deployed to the Kubernetes cluster.</p>
<p>Running this script creates all of the artifacts that are necessary for
deploying a new CAS server in the Kubernetes cluster in one directory. The
directory can be referenced in the base <code>kustomization.yaml</code>.</p>
<blockquote>
<p>The script does not modify your Kubernetes cluster. It creates the manifests
that you can apply to your Kubernetes cluster to add a CAS server.</p>
</blockquote>
<h2 id="create-a-cas-server">Create a CAS Server</h2>
<ol>
<li>
<p>Run the <code>create-cas-server.sh</code> script and specify, at a minimum, the instance
   name. The instance name is used to label the server and differentiate it from
   the default instance that is provided automatically.</p>
<pre class="highlight"><code class="language-bash">./create-cas-server.sh -i {{ INSTANCE }}</code></pre>

<p>The sample command creates a top-level directory <code>cas-{{ INSTANCE }}</code> that
 contains everything that is required for a new CAS server instance. For
 example, the directory contains the CR, PVC definitions for the permstore and
 data PVs, and so on.</p>
<blockquote>
<p>The <code>-o directory-path</code> argument can be used to specify the parent
directory for the output. For example, you can specify
<code>-o $deploy/site-config</code>. If you do not create the output in that
directory, you should move the new directory to <code>$deploy/site-config</code>.
Run the command with the <code>--help</code> argument to view all the options.</p>
</blockquote>
</li>
<li>
<p>In the base <code>kustomization.yaml</code> file, add the new directory to the resources
   section so that the CAS server is included when the manifest is rebuilt. This
   server is fully customizable with the use of patch transformers.</p>
<pre class="highlight"><code class="language-yaml">resources:
  - site-config/{{ DIRECTORY-PATH }}/cas-{{ INSTANCE }}</code></pre>

</li>
<li>
<p>Run <code>kustomize build</code> to generate a new manifest and then apply the manifest
   to the namespace in your cluster. These steps create the CAS pods, services,
   and so on, for your new server.</p>
<pre class="highlight"><code class="language-bash">kubectl get pods -l casoperator.sas.com/server={{ INSTANCE }}
sas-cas-server-{{ INSTANCE }}-controller     3/3     Running     0          1m

kubectl get pvc | grep {{ INSTANCE }}
NAME                                                  STATUS  ...
cas-{{ INSTANCE }}-data                                Bound  ...
cas-{{ INSTANCE }}-permstore                           Bound  ...</code></pre>

</li>
</ol>
<h2 id="example">Example</h2>
<p>Run the script with more options:</p>
<pre class="highlight"><code class="language-bash">./create-cas-server.sh --instance sample --output . --workers 2 --backup 1</code></pre>

<p>This sample command creates a new directory <code>cas-sample</code> in the current location
and creates a new CAS distributed server (MPP) CR with 2 worker nodes and a
backup controller.</p>
    </body>
</html>