<html>
    <head>
        <link rel="stylesheet" type="text/css" href="sas.css"/>
        <title>Using Kubernetes Tools from the sas-orchestration Image</title>
    </head>
    <body>
        <h1 id="using-kubernetes-tools-from-the-sas-orchestration-image">Using Kubernetes Tools from the sas-orchestration Image</h1>
<h2 id="overview">Overview</h2>
<p>The sas-orchestration image includes several tools that help
deploy and manage the software. It includes a <code>lifecycle</code> command
that can run various lifecycle operations as well as the recommended
versions of both <code>kustomize</code> and <code>kubectl</code>. These latter tools may
be used with docker&rsquo;s <code>--entrypoint</code> option.</p>
<p>Note: The examples use Docker, but other container engines can be used that adhere to the OCI runtime specification.</p>
<p>Note: All examples below are auto-generated based on your order.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>To run the sas-orchestration image, Docker must be installed.</p>
<p>Log in to the <code>cr.sas.com</code> Docker Registry, and retrieve the <code>sas-orchestration</code> image:</p>
<pre class="highlight"><code>cat sas-bases/examples/kubernetes-tools/password.txt | docker login cr.sas.com --username '09V53F' --password-stdin
docker pull cr.sas.com/viya-4-x64_oci_linux_2-docker/sas-orchestration:1.26.0-20201214.1607963475562</code></pre>

<p>After pulling the sas-orchestration image, there is no need to stay logged in to the Docker Registry. To log out:</p>
<pre class="highlight"><code>docker logout cr.sas.com</code></pre>

<p>Replace &lsquo;cr.sas.com/viya-4-x64_oci_linux_2-docker/sas-orchestration:1.26.0-20201214.1607963475562&rsquo; with a local tag for ease of use in the examples that will follow:</p>
<pre class="highlight"><code>docker tag cr.sas.com/viya-4-x64_oci_linux_2-docker/sas-orchestration:1.26.0-20201214.1607963475562 sas-orch</code></pre>

<h2 id="examples">Examples</h2>
<h3 id="lifecycle">lifecycle</h3>
<p>The <code>lifecycle</code> command executes deployment-wide operations over the assets deployed from an order.
See the README file at <code>$deploy/sas-bases/examples/kubernetes-tools/README.md</code> (for Markdown)
or <code>$deploy/sas-bases/docs/using_kubernetes_tools_from_the_sas-orchestration_image.htm</code> (for HTML) for
lifecycle operation documentation.</p>
<p>Docker uses the following options:</p>
<ul>
<li><code>-v</code> to mount the directories</li>
<li><code>-w</code> to define the working directory</li>
<li><code>-e</code> to define the needed environment variables</li>
</ul>
<h4 id="lifecycle-list">lifecycle list</h4>
<p>The <code>list</code> sub-command displays the available operations of a deployment</p>
<h5 id="lifecycle-list-example"><code>lifecycle list</code> example</h5>
<pre class="highlight"><code>docker run --rm \
  -v /deploy:/deploy \
  -w /deploy \
  sas-orch \
  lifecycle list --namespace a_namespace</code></pre>

<h4 id="lifecycle-run">lifecycle run</h4>
<p>The <code>run</code> sub-command runs a given operation.
Arguments before <code>--</code> indicate the operation to run and how lifecycle should locate the operation&rsquo;s
definition. Arguments after <code>--</code> apply to the operation itself, and may vary between operations.</p>
<h5 id="lifecycle-run-example"><code>lifecycle run</code> example</h5>
<pre class="highlight"><code>docker run --rm \
  -v /deploy:/deploy \
  -v /home/user/kubernetes:/kubernetes \
  -e "KUBECONFIG=/kubernetes/config" \
  sas-orch \
  lifecycle run \
    --operation deploy \
    --deployment-dir /deploy/sas-bases \
    -- \
    --manifest /deploy/site.yaml \
    --namespace default</code></pre>

<p>As indicated in the example, the <code>run</code> sub-command needs an operation (<code>--operation</code>) and the location of your assets (&ndash;deployment-dir).
The <code>deploy</code> lifecycle operation needs a manifest (<code>--manifest</code>) and the Kubernetes namespace to deploy
into, (<code>--namespace</code>). To connect and deploy into the Kubernetes cluster, the KUBECONFIG environment variable
is set on the container; (<code>-e</code>).</p>
<h3 id="kustomize">kustomize</h3>
<p>Use the <code>-v</code> option to mount the $deploy directory into the container,
with <code>-v &lt;directory name&gt;:/deploy</code>, and use <code>-w</code> to set the mounted /deploy
as the working directory. The following example assumes the $deploy
directory, with a kustomization.yaml and supporting files, is at /deploy.
Note that the <code>kustomize</code> call here is a simple example. Refer to the
deployment documentation for full usage details.</p>
<pre class="highlight"><code>docker run --rm \
  -v /deploy:/deploy \
  -w /deploy \
  --entrypoint kustomize \
  sas-orch \
  build . &gt; site.yaml</code></pre>

<h3 id="kubectl">kubectl</h3>
<p>The following example assumes a site.yaml exists in /deploy,
and a kubeconfig file exists in /home/user/kubernetes. Use <code>-v</code>
to mount the directories, and <code>-w</code> to use /deploy as the working
directory. Note that the <code>kubectl</code> call here is a simple example.
Refer to the deployment documentation for full usage details.</p>
<pre class="highlight"><code>docker run --rm \
  -v /deploy:/deploy \
  -v /home/user/kubernetes:/kubernetes \
  -w /deploy \
  --entrypoint kubectl \
  sas-orch \
  --kubeconfig=/kubernetes/kubeconfig apply -f site.yaml</code></pre>

<h2 id="additional-resources">Additional Resources</h2>
<ul>
<li>https://docs.docker.com/get-docker/</li>
<li>https://kustomize.io/</li>
<li>https://kubectl.docs.kubernetes.io/</li>
</ul>
    </body>
</html>