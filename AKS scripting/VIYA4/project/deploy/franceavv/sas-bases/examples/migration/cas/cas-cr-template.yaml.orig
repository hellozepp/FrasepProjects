apiVersion: viya.sas.com/v1alpha1
kind: CASDeployment
metadata:
  annotations:
    sas.com/sas-access-config: "true"
    sas.com/config-init-mode: "initcontainer"
  labels:
    app: sas-cas-operator
    app.kubernetes.io/instance: ${casServer}
    app.kubernetes.io/name: "cas"
    app.kubernetes.io/managed-by: sas-cas-operator
    sas.com/admin: "namespace"
  name: ${casServer}
spec:
  controllerTemplate:
    spec:
      tolerations:
      - key: "workload.sas.com/class"
        operator: "Equal"
        value: "cas"
        effect: "NoSchedule"
      initContainers:
      - image: sas-config-init
        name: sas-config-init
        env: []
        envFrom:
          - configMapRef:
              name: sas-go-config
          - configMapRef:
              name: sas-shared-config
          - secretRef:
              name: sas-consul-client
        volumeMounts:
          - mountPath: /cas/config/
            name: cas-default-config-volume
        resources:
          limits:
            memory: 2Gi
            cpu: 1
      containers:
      - name: cas  # required name for the CAS container
        readinessProbe:
          httpGet:
            path: /internal/state
            port: 8777
          initialDelaySeconds: 3
          periodSeconds: 3
        #args:  # change the command so we can manually run the entrypoint script and debug cas
          #- while true; do sleep 30; done;
        #command:
          #- /bin/bash
          #- -c
          #- --
        env:
        - name: CASCFG_MODE
          value: ${deploymentType}
        - name: CONSUL_HTTP_ADDR
          value: http://localhost:8500
        - name: CASENV_CONSUL_NAME
          value: ${casServer}
        - name: CASENV_CAS_VIRTUAL_PATH
          value: ${casServerVirtualPath}
        - name: OLD_PERMSTORE_PATH
          value: ${permStoreLocation}
        - name: OLD_DATA_PATH
          value: ${casDataDir}
        - name: CASCFG_MACHINELIST
          value: "/dev/null"
        - name: CASENV_CONSUL_TOKEN
          value: ""
        - name: CASENV_CAS_CONSUL_TOKENLOC
          value: "/opt/sas/viya/config/etc/SASSecurityCertificateFramework/tokens/consul/default/client.token"
        - name: CASENV_CAS_USE_CONSUL
          value: "true"
        - name: SAS_LICENSE
          valueFrom:
            secretKeyRef:
              key: SAS_LICENSE
              name: sas-cas-license
        envFrom:
        - configMapRef:
            name: sas-shared-config
        - configMapRef:
            name: sas-java-config
        - configMapRef:
            name: sas-access-config
        - configMapRef:
            name: sas-cas-config
        - configMapRef:
            name: sas-deployment-metadata
        - secretRef:
            name: sas-consul-client
        image: sas-cas-server
        resources:
          requests:
            memory: ${_memTotal_KB}
            cpu: ${_cpus}
        volumeMounts:
        - name: cas-default-permstore-volume
          mountPath: /cas/permstore
        - name: cas-default-data-volume
          mountPath: /cas/data
        - name: cas-default-cache-volume
          mountPath: /cas/cache
        - name: cas-default-config-volume
          mountPath: /cas/config
        - name: cas-tmp-volume
          mountPath: /tmp
          subPath: tmp
        - name: cas-license-volume
          mountPath: /cas/license
      imagePullSecrets:
      - name: sas-image-pull-secrets
      volumes:
      - name: cas-default-permstore-volume
        persistentVolumeClaim:
          claimName: cas-default-permstore
      - name: cas-default-data-volume
        persistentVolumeClaim:
          claimName: cas-default-data
      - name: cas-default-cache-volume
        emptyDir: {}
      - name: cas-default-config-volume
        emptyDir: {}
      - name: cas-tmp-volume
        emptyDir: {}
      - name: cas-license-volume
        secret:
          secretName: sas-cas-license
          items:
          - key: SAS_LICENSE
            path: license.sas
  workers: ${numberOfNodes}
  backupControllers: ${backupControllers}
  workerTemplate:
    #podSpec - optional worker template
  publishHTTPIngress: false
  ingressTemplate:
    spec:
      rules:
      - host: $(INGRESS_HOST)
    metadata:
      annotations: {}
      labels: {}
